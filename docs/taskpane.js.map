{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskpane/GlobalOptions.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["export var globalOptions = {\r\n  gptKey: \"---\",\r\n  format: \"journalist\",\r\n  language: \"english\",\r\n  gptModel: \"curie\",\r\n  setMaxNumWords: false,\r\n  maxNumWords: 500,\r\n  temperature: 0.2,\r\n};\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global document, Office */\r\n\r\nimport { globalOptions } from \"./GlobalOptions\";\r\nvar initGui = false;\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Outlook) {\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    document.getElementById(\"app-body\").style.display = \"flex\";\r\n    document.getElementById(\"run\").onclick = run;\r\n    document.getElementById(\"txtAPIKEY\").onblur = valuesChanged;\r\n    document.getElementById(\"cmbLanguage\").onchange = valuesChanged;\r\n    document.getElementById(\"cmbGPTModel\").onchange = valuesChanged;\r\n    document.getElementById(\"chkSetMaxNumWords\").onchange = valuesChanged;\r\n    document.getElementById(\"iiMaxNumWords\").onblur = valuesChanged;\r\n    document.getElementById(\"diTemperature\").onblur = valuesChanged;\r\n    document.getElementById(\"txtFormat\").onblur = valuesChanged;\r\n    document.getElementById(\"btnSaveOptions\").onclick = saveOptions;\r\n    document.getElementById(\"btnSubstituteSelectionInMail\").onclick = substituteSelectionInMail;\r\n\r\n    var tablinks = document.getElementsByClassName(\"tablinks\");\r\n    tablinks[0].onclick = showTabRephraser;\r\n    tablinks[1].onclick = showTabOptions;\r\n    loadOptions();\r\n    showTabRephraser();\r\n    document.getElementById(\"btnSubstituteSelectionInMail\").style.visibility = \"hidden\";\r\n  }\r\n});\r\n\r\nexport function saveOptions() {\r\n  try {\r\n    Office.context.roamingSettings.set(\"gptKey\", globalOptions.gptKey);\r\n    Office.context.roamingSettings.set(\"format\", globalOptions.format);\r\n    Office.context.roamingSettings.set(\"language\", globalOptions.language);\r\n    Office.context.roamingSettings.set(\"gptModel\", globalOptions.gptModel);\r\n    Office.context.roamingSettings.set(\"setMaxNumWords\", globalOptions.setMaxNumWords);\r\n    Office.context.roamingSettings.set(\"maxNumWords\", globalOptions.maxNumWords);\r\n    Office.context.roamingSettings.set(\"temperature\", globalOptions.temperature);\r\n    Office.context.roamingSettings.saveAsync();\r\n  } catch (error) {}\r\n}\r\n\r\nexport function loadOptions() {\r\n  try {\r\n    const gptKey = Office.context.roamingSettings.get(\"gptKey\");\r\n    if (typeof gptKey === typeof globalOptions.gptKey) globalOptions.gptKey = gptKey;\r\n\r\n    const format = Office.context.roamingSettings.get(\"format\");\r\n    if (typeof format === typeof globalOptions.format) globalOptions.format = format;\r\n\r\n    const language = Office.context.roamingSettings.get(\"language\");\r\n    if (typeof language === typeof globalOptions.language) globalOptions.language = language;\r\n\r\n    const gptModel = Office.context.roamingSettings.get(\"gptModel\");\r\n    if (typeof gptModel === typeof globalOptions.gptModel) globalOptions.gptModel = gptModel;\r\n\r\n    const setMaxNumWords = Office.context.roamingSettings.get(\"setMaxNumWords\");\r\n    if (typeof setMaxNumWords === typeof globalOptions.setMaxNumWords) globalOptions.setMaxNumWords = setMaxNumWords;\r\n\r\n    const maxNumWords = Office.context.roamingSettings.get(\"maxNumWords\");\r\n    if (typeof maxNumWords === typeof globalOptions.maxNumWords) globalOptions.maxNumWords = maxNumWords;\r\n\r\n    const temperature = Office.context.roamingSettings.get(\"temperature\");\r\n    if (typeof temperature === typeof globalOptions.temperature) globalOptions.temperature = temperature;\r\n  } catch (error) {}\r\n}\r\n\r\nfunction dataToGUI() {\r\n  document.getElementById(\"txtAPIKEY\").value = globalOptions.gptKey;\r\n  document.getElementById(\"txtFormat\").value = globalOptions.format;\r\n  document.getElementById(\"cmbLanguage\").value = globalOptions.language;\r\n  document.getElementById(\"cmbGPTModel\").value = globalOptions.gptModel;\r\n  document.getElementById(\"chkSetMaxNumWords\").checked = globalOptions.setMaxNumWords;\r\n  document.getElementById(\"iiMaxNumWords\").value = globalOptions.maxNumWords;\r\n  document.getElementById(\"diTemperature\").value = globalOptions.temperature;\r\n  toggleEnabled(\"chkSetMaxNumWords\", \"iiMaxNumWords\");\r\n}\r\n\r\nfunction toggleEnabled(checkboxID, controlID, reverse = false) {\r\n  var chk1 = document.getElementById(checkboxID);\r\n  var txt1 = document.getElementById(controlID);\r\n  if (chk1.checked) {\r\n    txt1.disabled = reverse;\r\n  } else {\r\n    txt1.disabled = !reverse;\r\n  }\r\n}\r\n\r\nfunction guiToData() {\r\n  globalOptions.gptKey = document.getElementById(\"txtAPIKEY\").value;\r\n  globalOptions.format = document.getElementById(\"txtFormat\").value;\r\n  globalOptions.language = document.getElementById(\"cmbLanguage\").value;\r\n  globalOptions.gptModel = document.getElementById(\"cmbGPTModel\").value;\r\n  globalOptions.setMaxNumWords = document.getElementById(\"chkSetMaxNumWords\").checked;\r\n  globalOptions.maxNumWords = Math.max(1, Math.min(2040, document.getElementById(\"iiMaxNumWords\").value));\r\n  globalOptions.temperature = Math.max(0.0, Math.min(1.0, document.getElementById(\"diTemperature\").value));\r\n}\r\n\r\nfunction valuesChanged() {\r\n  if (initGui) return;\r\n\r\n  initGui = true;\r\n  guiToData();\r\n  dataToGUI();\r\n  initGui = false;\r\n}\r\n\r\nfunction showTabRephraser() {\r\n  showTab(0, \"Rephraser\");\r\n}\r\n\r\nfunction showTabOptions() {\r\n  showTab(1, \"Options\");\r\n}\r\n\r\nfunction showTab(tabButton, tabName) {\r\n  var i, tabcontent, tablinks;\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n  dataToGUI();\r\n  document.getElementById(tabName).style.display = \"block\";\r\n  tablinks[tabButton].className += \" active\";\r\n}\r\n\r\nfunction modelToText(model) {\r\n  switch (model) {\r\n    case \"ada\":\r\n      return \"text-ada-001\";\r\n    case \"babbage\":\r\n      return \"text-babbage-001\";\r\n    case \"curie\":\r\n      return \"text-curie-001\";\r\n    case \"davinci\":\r\n      return \"text-davinci-003\";\r\n    default:\r\n      return \"text-curie-001\";\r\n  }\r\n}\r\n\r\nasync function makeGPTRequest(prompt, api_key, max_tokens, modelStr, temperature) {\r\n  const MODEL = modelToText(modelStr);\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\"POST\", \"https://api.openai.com/v1/completions\");\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n  xhr.setRequestHeader(\"Authorization\", `Bearer ${api_key}`);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) {\r\n        resolve(JSON.parse(xhr.response));\r\n      } else {\r\n        reject(xhr.statusText);\r\n      }\r\n    };\r\n\r\n    xhr.send(\r\n      JSON.stringify({\r\n        model: MODEL,\r\n        prompt: prompt,\r\n        max_tokens: max_tokens,\r\n        temperature: temperature,\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nasync function rephraseText(prompt) {\r\n  const nTok = 2040;\r\n\r\n  const resultText = await makeGPTRequest(\r\n    prompt,\r\n    globalOptions.gptKey,\r\n    nTok,\r\n    globalOptions.gptModel,\r\n    globalOptions.temperature\r\n  );\r\n  if (resultText[\"error\"]) {\r\n    return \"Error:<br>\" + resultText[\"error\"][\"message\"];\r\n  } else {\r\n    return resultText[\"choices\"][0][\"text\"];\r\n  }\r\n}\r\n\r\nexport async function run() {\r\n  const USE_GPT = true;\r\n  document.getElementById(\"btnSubstituteSelectionInMail\").style.visibility = \"hidden\";\r\n\r\n  Office.context.mailbox.item.getSelectedDataAsync(\r\n    Office.CoercionType.Text,\r\n    { valueFormat: \"unformatted\" },\r\n    async (result) => {\r\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n        var prompt = \"\";\r\n        if (globalOptions.format != \"\") {\r\n          var bodyData = result.value.data;\r\n\r\n          var bodyDataStr = \"\";\r\n          if (typeof bodyData === \"string\") {\r\n            bodyDataStr = bodyData;\r\n          } else {\r\n            bodyDataStr = String(bodyData);\r\n          }\r\n\r\n          if (bodyData != \"\") {\r\n            prompt = \"If necessary translate in \" + globalOptions.language;\r\n\r\n            if (globalOptions.setMaxNumWords) {\r\n              prompt += \" and summarize in maximum \" + globalOptions.maxNumWords + \" words \";\r\n            } else {\r\n              prompt += \" and paraphrase \";\r\n            }\r\n\r\n            prompt += \"like a \" + globalOptions.format + \" without adding any additional information: \" + bodyDataStr;\r\n          }\r\n\r\n          if (prompt != \"\") {\r\n            if (USE_GPT) {\r\n              const resultText = await rephraseText(prompt);\r\n              document.getElementById(\"lblRephrasedText\").innerHTML = resultText.trimStart();\r\n            } else {\r\n              document.getElementById(\"lblRephrasedText\").innerHTML = \"NO GPT IN USE:<br><br>\" + prompt;\r\n            }\r\n            document.getElementById(\"btnSubstituteSelectionInMail\").style.visibility = \"visible\";\r\n          } else {\r\n            document.getElementById(\"lblRephrasedText\").innerHTML = \"Error: No text selected\";\r\n          }\r\n        } else {\r\n          document.getElementById(\"lblRephrasedText\").innerHTML = \"Error: Invalid format selected\";\r\n        }\r\n      } else {\r\n        document.getElementById(\"lblRephrasedText\").innerHTML = \"Error: No text selected\";\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport async function substituteSelectionInMail() {\r\n  var text = document.getElementById(\"lblRephrasedText\").innerHTML;\r\n\r\n  if (text !== \"\") {\r\n    const formattedText = text.replace(\"<br>\", \"\\n\").trimStart();\r\n    Office.context.mailbox.item.setSelectedDataAsync(formattedText);\r\n  }\r\n}\r\n"],"names":["globalOptions","gptKey","format","language","gptModel","setMaxNumWords","maxNumWords","temperature","initGui","saveOptions","Office","context","roamingSettings","set","saveAsync","error","dataToGUI","document","getElementById","value","checked","checkboxID","controlID","reverse","chk1","txt1","disabled","toggleEnabled","valuesChanged","Math","max","min","showTabRephraser","showTab","showTabOptions","tabButton","tabName","i","tabcontent","tablinks","getElementsByClassName","length","style","display","className","replace","modelToText","model","makeGPTRequest","prompt","api_key","max_tokens","modelStr","MODEL","xhr","XMLHttpRequest","open","setRequestHeader","Promise","resolve","reject","onload","status","JSON","parse","response","statusText","send","stringify","rephraseText","resultText","run","visibility","mailbox","item","getSelectedDataAsync","CoercionType","Text","valueFormat","result","AsyncResultStatus","Succeeded","bodyData","data","bodyDataStr","String","innerHTML","trimStart","substituteSelectionInMail","text","formattedText","setSelectedDataAsync","onReady","info","host","HostType","Outlook","onclick","onblur","onchange","get","loadOptions"],"sourceRoot":""}